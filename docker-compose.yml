version: "3.8"

services:
  postgres:
    image: postgres:16-alpine
    container_name: ts_ddd_postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ts_ddd_sample
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ts_ddd_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka:
    image: apache/kafka:3.7.0
    container_name: ts_ddd_kafka
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
      - CLUSTER_ID=5L6g3nShT-eMCtK--X86sw
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_NODE_ID=1
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@localhost:9093
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_LOG_DIRS=/var/lib/kafka/data
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
    ports:
      - "9092:9092"
    restart: unless-stopped

  # api:
  #   build: .
  #   container_name: ts_ddd_api
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_started
  #   environment:
  #     - KAFKA_BROKERS=kafka:9092
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - ARTICLE_EVENT_TOPIC=article-events
  #     - ARTICLE_READ_MODEL_GROUP_ID=article-read-model
  #   ports:
  #     - "3000:3000"
  #   restart: unless-stopped

  # article-readmodel:
  #   build: .
  #   container_name: ts_ddd_article_readmodel
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_started
  #   environment:
  #     - KAFKA_BROKERS=kafka:9092
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - ARTICLE_EVENT_TOPIC=article-events
  #     - ARTICLE_READ_MODEL_GROUP_ID=article-read-model
  #   command: ["pnpm", "article:readmodel"]
  #   restart: unless-stopped

volumes:
  redis_data:
    driver: local
  kafka_data:
    driver: local
  postgres_data:
    driver: local
